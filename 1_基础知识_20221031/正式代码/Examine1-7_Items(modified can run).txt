# 2022_10_24_Mon-2022_10_27_Thur     2320747195@qq.com       @福州大学222100306洪朗晨       ALL RIGHTS RESERVED.
# 类的编写——商品类

'''
(1)设计⼀个商品类，它具有的私有数据成员是商品序号、商品名、单价、总数量和剩余数量。√    ps：增加成本，售出数量，单件利润
(2)具有的公有成员函数是：
    ①初始化商品信息的构造函数init √
    ②显示商品信息的函数display   √
    ③计算已售出 商品价值income   √
    ④修改商品信息的函数setdata   √
        ps：我在以下添加了一些子函数
            def list_choos(self):
                # 将输入的数字字符串（空格分割）用列表返回
            def chooseMenu_info(self):
                # 您要修改哪一项信息？该函数为信息名称菜单表
                # 将被 setdata 引用
'''
'''
增加小功能/升级：

1. 细节
（1）成本，售出数量，单件利润       √
（2）进而增加利润率计算            √
（3）在编写income时顺便展示更多信息 √
（5）增加利润率功能               √

2. 真有用
（4）增加存入文件功能！！          √
（6）检查输入是否合法——》否则不让修改
    a. 字符串不做限定           √
    b. 检查剩余数量不能为负      √
    c. 数字都不萌为负          √（输入提取时限定0~6已筛选）
（7）创造一个数列将所有Ttems都存入  ×
'''
    # 0-2"商品序号" 1-3"单价",2-4"成本",3-5"总数量" 4-6"卖出数量"            均保留两位小数而不是取整数
    # （计算：5-7"单件利润",计算：6-8"剩余数量"),(计算：7=9"总利润"),(计算8-10利润率)
'''
1. 修改后显示信息          √
2. 检查剩余数量不能为负     √
3. 修改时输入多个重复只算1个 √
'''
'''
再升级想法：
    -觉得数据成员倒不如直接用一个字典框起来，取名字
    -原因：可能想要把代码写得完善，“商品序号”...等名字以及相应数据成员重复出现
    -想要做出以下改变：
        将self.sequence等都存在字典info_name={}里
        info_name[self.sequence]="商品序号"
        这样修改时可以list(info_name.keys())[i]=""
        
此想法取其精华：
    -总体来说！数列比字典写起来方便很多！不需要多个复合！（嵌套）
    -字符串元素，和数字元素单独放在两个数列（数字单独放数列才能计算！）
    -手动（只能是手动了，字典提取键的话，值不能一起提取）         ————        诶！好像可以提取值数列再切割为字符串和数字串！

    优势：这样写还是挺简便的，少打了很多汉字。
    缺点：（就是注释列表下标多了亿点点）
    优点：但是我宁愿注释多也不要那么多冗余的print！
    缺点：不过print确实简洁美观
    
又多了一丢丢升级想法：
    （1）诶！好像可以提取值数列再切割为字符串和数字串！
    （2）在修改内容后income也会改变，在这里可以写一个刷新reset_income函数，被init，set引用，这样就不必细节考虑哪些被变化了
            但是突然又发现，也没有牵动很多，就1-2个值，还不如直接在set里写方便
    （3）下次可以用format！！
'''
'''
关于功能细节的想法：
    可以将类重载，分为可以一个一个数的商品，和不可数的
    （用来分别检验”数量“）
'''
Pu="元" #price_unit
class Items():

    #宏变量定义
    inf=("商品名","单位","商品序号","单价","成本","总数量","卖出数量","单件利润","剩余数量")                     #infomation_names
    ds=["",""]                #两项:"商品名","单位"                                                      #data_strs
    dn=[1,1,1,1,1,1,1,1,1]    #八项:"商品序号","单价","成本","总数量","卖出数量","单件利润","剩余数量","利润率"  #data_nums

    def __init__(self,ls,ln):   # list_strs,list_nums
    # 0"商品名",1"单位",0-2"商品序号",1-3"单价",2-4"成本",3-5"总数量"
    # 4-6"卖出数量",（计算：5-7"单件利润",计算：6-8"剩余数量"),(计算：7=9"总利润"),(计算8-10利润率)
        for i in range(0,2):        #改商品名和单位 不影响其他元素
            self.ds[i]=ls[i]        #直接初始化                      #data_strs,list_strs
        for i in range(0,5):
            #改数字 会影响总利润啥的           #data_nums,list_nums
            if(i==0 or i==3 or i==4):
                self.dn[i] = int ("%.f" % float(ln[i]))  # 先初始化 （这些初始化为整数）
            else:
                self.dn[i]=float("%.2f"%float(ln[i]))     # 先初始化 （这些初始化为两位小数）

        self.calcul()               #然后计算二次计算的值   

    def calcul(self):
        #计算二次计算的值，存好

        self.dn[5] = self.dn[1] - self.dn[2]  # 利润为单价-成本              #data_nums,list_nums
        self.dn[6] = self.dn[3] - self.dn[4]  # 售出数量                    #data_nums,list_nums
        self.income()               # 总收入                      #两位小数浮点
        self.income_rate()          # 商品利润率                   #两位小数浮点
        return
        
    def display(self):  #!!开心！display简便写法竟然成功了！！
        #展示商品信息
        # 0"商品名"ds,1"单位"ds,0-2"商品序号",1-3"单价",2-4"成本",3-5"总数量",
        # 4-6"卖出数量",（计算：5-7"单件利润"）,（计算：6-8"剩余数量"),(计算：9"总利润"),(计算8-10利润率)

                            # 标题：序号 商品名
        print("--------------------------------")
        print("\t" + str(self.dn[0]) + "." + self.ds[0])
                            # 具体信息
        for i in range(0,9):
            if i==1:                                    #1"单位"  单位是不用打印的，所以直接跳过
                continue
                            # 局部（一行）统一的格式
            print((self.inf)[i].ljust(6) + "：",end='')  # 打印信息名+占位6个字符+不换行（看情况）

            # 0"商品名"ds,1"单位"ds,0-2"商品序号",1-3"单价",2-4"成本",3-5"总数量"
            # 4-6"卖出数量",（计算：5-7"单件利润"）,（计算：6-8"剩余数量"),(计算：9"总利润"),(计算8-10利润率)
            if i==0:
                print(self.ds[i])                       #0"商品名"ds——     无格式打印+不加
            elif i==2 or i==10:
                print(str((self.dn)[i-2]).ljust(10))    #2"商品序号"——      转换格式打印+不加
            else:
                print(str(self.dn[i-2]),end='')          #3,4,5,6,7都含有数字 转换格式打印
                if (i==3) or (i==4) or (i==7):
                    print(Pu+"/",end='')                  #3,4,7 都是单价——    加“元/”+不换行
                # 局部（一行末）统一的格式
                #1"单位"
                print(self.ds[1])                       #3,4,5,6,7          一起加上数量单位，eg“个”
        print("--------------------------------")
        # 展示总利润
        pen.show_income()

    def income(self):   #以下三个语句无法合并。return a=b 不合法
        # 计算总收入income，但不展示
        # 4-6"卖出数量",（计算：5-7"单件利润"）
        income = self.dn[4] * self.dn[5]        # income的计算=卖出数量*单价利润
        self.dn[7]="%.2f"%income                # income保留两位小数
        return income                           # 返回两位小数浮点数

    def income_rate(self):
        # 0"商品名"ds,1"单位"ds,0-2"商品序号",1-3"单价",2-4"成本",3-5"总数量"
        # 4-6"卖出数量",（计算：5-7"单件利润"）,（计算：6-8"剩余数量"),(计算：9"总利润"),(计算8-10利润率)
        # 计算利润率
        self.dn[8]=float("%.2f"%(float(self.dn[5])/float(self.dn[2])))   # 利润/成本*100%
        return self.dn[8]

    def show_income(self):
        # 计算当前收入
        #         print("单件利润为：".ljust(12) + str(self.dn[5]).ljust(10) + Pu)                 #单件利润+str（5利润（已转化为.2）+Pu
        # 1"单位"ds,4-6"卖出数量",（计算：5-7"单件利润"）
        # 已销售数量+str（4-6"卖出数量"+1单位0）
        print("利润信息".rjust(14))
        print("当前商品已销售数量为：".ljust(12) + str(self.dn[4]).ljust(10) + self.ds[1])            #净收入+总利润(计算：9"总利润")+单位
        print("当前商品目前总赚得：".ljust(12) + str(self.dn[7]).ljust(10)+Pu)
        print("该商品利润率为：".ljust(12) + str(self.dn[8]).ljust(10))                   #利润率+
        print("--------------------------------")                                      #分割线

    def setdata(self):  # ！！要注意修改一个信息时其他信息是否也变化！！
        # 修改商品信息

                            # 显示菜单，保留名字
        self.chooseMenu_info()  # 显示菜单
        name=self.ds[0]         # 保留商品名字。（如果名字即将被修改，能被保留）

                            # 输入元素。  ！！返回的都是在范围内的元素！！   。
        list_scan=self.list_choos() # 为防止函数多次被调用，这里用一个等量代换替换返回值（列表or int）
        #print(list_scan)       # 测试：×(空字符串转化为列表为：0，int) 这个推论不正确，事实上，（是我自己写了个返回0
        #print(type(list_scan)) # 测试：类型为：len==0，List
        if len(list_scan)==0:
            print("没有任何元素被修改！")
            return

                            # 正确print
        # 0"商品名"ds,1"单位"ds,0-2"商品序号",1-3"单价",2-4"成本",3-5"总数量",
        # 4-6"卖出数量",（计算：5-7"单件利润"）,（计算：6-8"剩余数量"),(计算：9"总利润")
        for i in list_scan:  # 如有内容，根据输入的序号（依次遍历）    # 经测试，函数只执行1次
                                                # 字符串不用检验，直接修改
            if (i<2):                                                                   # ds:0"商品名"ds,1"单位"ds
                self.ds[i-2]=str(input("您想要将 "+name+" 的 "+self.inf[i]+" 修改为："))      # 不用转化类型
                print("您已成功将 "+name+" 的 "+self.inf[i]+" 修改为："+self.ds[i])         # 不用转化类型
            elif (i<=6):                                                                 #dn要i-2是因为和信息条的index少2
                                                # 转化类型；输入想要修改后的值
                if (i==2):
                    confirm = int(input("您想要将 " + self.inf[i] + " 修改为："))            # 商品序号保留为整数 int
                else:
                    confirm = float (("%.2f") % float(input("您想要将 " + self.inf[i] + " 修改为："))) # 其他截取两位小数  float
                                                # 检验输入是否合理
            flag=1  # 标志是否合理
            store = self.dn[i - 2]  # 给if not flag用

            if not (self.ck_0(confirm,0)):  # 先检查输入中是否有负数
                flag=0  # 若小于0，则flag=0
            elif i>=5:                   # 若大于0，还要检查，"剩余数量"是否合理（只要剩余数量，利润可以为负数）
                self.dn[i-2]=confirm     # 替代(int/float)    # 输入值已保留，暂时替代数列中的位置
                print(type(self.dn[i-2]))
                if not(self.ck_0(self.dn[1],self.dn[2])):    # 检查剩余数量(若小于0)
                    flag=0
                                            # 对检验结果进行反馈()
            if not flag:    # (不能修改)
                print("输入的"+str(self.inf[i])+str(confirm)+"不合理！")   # 弹出提示
                self.dn[i-2]=store       # 退回保留值
                continue                 # 不进行修改，继续遍历
                                            # 确认修改
            else:
                self.dn[i-2]=confirm
                print("您已成功将 " + name + " 的 " + self.inf[i] + " 修改为：" + str(self.dn[i-2]))   # 转化类型
                self.calcul()            # 打印后记得修改发生变化的值
        # 上一个函数检查过，这里不会出现else了

    def chooseMenu_info(self):
        # 您要修改哪一项信息？该函数为 信息菜单表
        # 将被 setdata 引用
        print("修改选项菜单".rjust(16))
        print("--------------------------------")
        print("0    商品名")
        print("1    单位")
        print("2    商品序号")
        print("3    单价")
        print("4    成本")
        print("5    总数量")
        print("6    卖出数量")
        print("--------------------------------")

    def list_choos(self):  # 返回数字数列，空数列（增了又删），或单个元素（没有任何增加元素）
        # 将输入的数字字符串（空格分割）用列表返回

        list_sets=[]                            # 将被返回的数字列表
        print("请输入对应的(序号)，用空格分开，回车时(结束)")
        #print("--------------------------------")   #不用这行也美观
        sequences = input("现在请输入：")         # 输入的内容（全部）
        print("--------------------------------")

        # 将sequence以空格为分界，分为一个一个字符串
        if not len(sequences.split()):          # 检查是否没有输入有效内容
            return []                           # 没有有效内容，则返回空[]，和没有任何元素的数列一样

        for i in sequences.split():             # 如果内容为：以空格分开的字符串（可能含有字母），则继续筛选——》遍历
            if i.isdigit():                     # 如果这串字符串为数字，则判断——》是否在范围内
                if 0<=int(i)<=6:                 # 如果在范围内，恭喜你（被我恭喜了），可以将此字符串纳入返回的数列中
                    if int(i) in list_sets:
                        continue
                    list_sets.append(int(i))    #!如此看来，返回的数列里只能有 范围内的数字集；即只能存在合法数字，否则返回空[]
                else:
                    print(i+" 信息序号无匹配，无法修改！")   #!这条代码将不符合范围内的数字拎出，强调它不在范围内

        return list_sets                        # 将整理好后的数列返回

        '''
        #意图:
        （1）以空格为分割，分割字符串；
        （2）将字符串转化为列表形式存入
        sequences.split()           #测试   ：split是否改变原函数
        print(sequences)            #测试发现：split不会改变原函数              #23 43
        print(sequences.split())    #测试发现：split返回的就是列表（字符串列表）   #['23', '43']
        list_set=sequences.split()  #将成功分割的字符串 存入列表
        print(list_set)             #测试   ：切割后返回的列表 是否正确 复制给list_set（测试成功）    #['23', '43']
        '''

    def file(self):
        file_name = "Items.txt"
        with open(file_name, 'a') as fp:
                        # 标题：序号 商品名
            fp.write("--------------------------------\n")
            fp.write("\t" + str(self.dn[0]) + "." + self.ds[0]+"\n")
                                # 具体信息
            for i in range(0,9):
                if i==1:                                    #1"单位"  单位是不用打印的，所以直接跳过
                    continue
                                # 局部（一行）统一的格式
                fp.write((self.inf)[i].ljust(6) + "：")  # 打印信息名+占位6个字符+不换行（看情况）

                # 0"商品名"ds,1"单位"ds,0-2"商品序号",1-3"单价",2-4"成本",3-5"总数量"
                # 4-6"卖出数量",（计算：5-7"单件利润"）,（计算：6-8"剩余数量"),(计算：9"总利润")
                if i==0:
                    fp.write(self.ds[i]+'\n')                       #0"商品名"ds——     无格式打印+不加
                elif i==2:
                    fp.write(str((self.dn)[i-2]).ljust(10)+'\n')    #2"商品序号"——      转换格式打印+不加
                else:
                    fp.write(str(self.dn[i-2]))         #3,4,5,6,7都含有数字 转换格式打印
                    if (i==3) or (i==4) or (i==7):
                        fp.write(Pu+"/")                  #3,4,7 都是单价——    加“元/”+不换行
                    # 局部（一行末）统一的格式
                    #1"单位"
                    fp.write(self.ds[1]+'\n')                       #3,4,5,6,7          一起加上数量单位，eg“个”
            fp.write("--------------------------------"+'\n')

            fp.write("利润信息".rjust(14))
            fp.write("\n")
            fp.write("当前商品已销售数量为：".ljust(12) + str(self.dn[4]).ljust(10) + self.ds[1])  # 已销售数量+str（4-6"卖出数量"+1单位
            self.income()  # 临时计算一下income，确保dn[5]里有东东
            fp.write("\n")
            fp.write("单件利润为：".ljust(12) + str(self.dn[5]).ljust(10) + Pu)  # 单件利润+str（5利润（已转化为.2）+Pu
            fp.write("\n")
            fp.write("目前总赚得：".ljust(12) + str(("%.2f" % (self.income()))).ljust(10) + Pu)  # 净收入+总利润(计算：9"总利润")+Pu
            fp.write("\n")
            fp.write("--------------------------------\n")

    # 0"商品名",1"单位",0-2"商品序号",1-3"单价",2-4"成本",3-5"总数量"
    # 4-6"卖出数量",（计算：5-7"单件利润",计算：6-8"剩余数量"),(计算：7=9"总利润"),(计算8-10利润率)
    def ck_0(self,a,b):# 检查两数相减是否大于等于0（检验剩余数量是否合理）
        return not float(a)<float(b)          # 如果卖出数量超过总数

def bin_cover():    # 封面：展开库中所有商品（其实也只有一件啦）
    print('''
--------------------------------
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
--------------------------------
|#|                          |#|
|#|    即将打开仓库所有商品      |#|
|#|                          |#|
--------------------------------
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
--------------------------------
        ''')
def ending_cover():
    print(
"""--------------------------------
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
--------------------------------
        欢迎来找bug(✿◡‿◡)
    （其实我只是客气一下）(✿◡‿◡)
              拜~
--------------------------------
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
--------------------------------
   🍀   每   日   励   志   🍀
     怪 不 得 我 在 负 重 前 行
 原 来 是 有 人 在 替 我 岁 月 静 好
--------------------------------
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

""")

            # 主函数
    # 封面
bin_cover()
    # 建立一个Items类
pen_ls=[ "Montblanc Pen", "支"]
pen_ln=[1, 5919.16, 2650, 13, 11]
pen = Items(pen_ls,pen_ln)  # 万宝龙钢笔  （真贵）
    # 展示内容
pen.display()
while (1):
    # 展示修改代码
    if input("修改此项的内容吗？回车：不需要；1：修改\n请输入：")=='1':
        pen.setdata()
        print("修改后信息如下：")
        pen.display()
    if input("是否需要存入文件？回车：不需要；1：存入\n请输入：")=='1':
        pen.file()
        print("已成功存入文件Items.txt!")
    if input("宝，玩够了退出吗？(✿◡‿◡)回车：\n退出；任意键：继续\n请输入：")=='':
        break

    # 结束展示
ending_cover()

'''
学会的知识：
1.(写display时为了让展示界面好看学会的知识)——字符长度限定 输出，字符对齐
    （1）print("er".ljust(10,"%"))
    当先前字符串长度《10 才能按照长度输出，大于则按原字符串输出！
    （2）对齐语句
        ljust   向左对齐
        rjust   向右对齐
        center  中间对齐  

2.#match函数的使用
（1）代码示例
    match t:
        case 1:
            print("!")
        case 2:
            print("@")
        case _:
            print("noce")
#结果：@
（2）与switch不同的是case匹配到其一后，就不会继续遍历下面的case了
    因此也不需要break

3.错题！！
    字典的键遍历打印时一定要转化为list形式先！！
    因为dic_keys类型时不可以直接打印的！！

4.感悟（写类里数据简便存储）：原来简单的python也没有那么简单！

5.知识：保留两位小数！
    print("%.2f" % num)

6.积累
    for i in fun():
    当func（）为返回列表的函数时
        经检验，该函数只执行1次，而不是每次都执行。
        即 返回列表之后就不再执行
        
    return a=b 不合法
'''